package rsl.compiler;

/**
 * @author rroels
 *
 * ModelDescriptor contains metadata about an RSL model (e.g. the model name or version).
 * A ModelDescriptor object is attached to some other classes (e.g. MemoryJavaSourceFile or MemoryJavaClassFile) so that
 * the metadata for the model that defines the class can be used during the compilation process. For instance, the
 * {@code modelName} is used to set a class's package path (e.g. rsl.models.mindxpres.NavLink).
 *
 * Methods {@code equals} and {@code hashCode} are implemented so that ModelDescriptors are compareable.
 * This allows ModelDescriptors to be sorted/grouped using standard Java sorting/grouping methods, for instance to group
 * classes defined within the same model in the same JAR file.
*/

public class ModelDescriptor {

    private String modelName;
    private String modelVersion;

    public ModelDescriptor(String modelName, String modelVersion)
    {
        this.modelName = modelName;
        this.modelVersion = modelVersion;
    }

    public String getModelName() {
        return modelName;
    }

    public String getModelVersion() {
        return modelVersion;
    }

    /**
     * If ModelDescriptors have the same model name and the same model version, then we assume they are equal.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        ModelDescriptor that = (ModelDescriptor) o;

        if (modelName != null ? !modelName.equals(that.modelName) : that.modelName != null) return false;
        return modelVersion != null ? modelVersion.equals(that.modelVersion) : that.modelVersion == null;
    }

    /**
     * Generated by IntelliJ, don't know why it chooses the prime number 31 to be part of the hash, but seems to be a
     * standard approach to include a prime number.
     */
    @Override
    public int hashCode() {
        int result = modelName != null ? modelName.hashCode() : 0;
        result = 31 * result + (modelVersion != null ? modelVersion.hashCode() : 0);
        return result;
    }

}
